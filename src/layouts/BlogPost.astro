---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '@/components/FormattedDate'
import BaseLayout from '@/layouts/BaseLayout'
import PostTag from '@/components/PostTag'
import { getLangFromUrl, getTranslation } from '@/i18n/utils'
import type { MarkdownHeading } from 'astro'
import { Image } from 'astro:assets'
import { getCover } from 'src/utils/cover'
import { Lang } from '@/i18n/utils'

type Props = {
  id: CollectionEntry<Lang>['id']
  data: CollectionEntry<Lang>['data']
  headings: MarkdownHeading[]
  readTime: string
}

const { data, readTime } = Astro.props
const { title, description, pubDate, tags } = data

const articleDate = pubDate.toISOString()

const lang = getLangFromUrl(Astro.url)
const cover = getCover(lang, Astro.props)
const t = getTranslation(lang)
---

<BaseLayout
  lang={lang}
  title={title}
  description={description}
  ogImage={cover?.src}
  articleDate={articleDate}
>
  <article class="min-w-full">
    <header class="mb-3 space-y-6">
      <section class="space-2">
        <section class="flex items-center justify-center gap-x-1">
          <p class="text-center text-sm text-opacity-50">
            {t.published}
            <FormattedDate date={pubDate} />
          </p>
          <p class="text-center text-sm font-semibold">
            - {readTime}
            {t.minutes}
          </p>
        </section>

        <h1 class="text-center text-3xl font-bold">
          {title}
        </h1>
      </section>

      <section
        class="flex flex-wrap justify-center items-center gap-x-2 gap-y-4"
      >
        {tags.map((tag) => <PostTag lang={lang} tag={tag} />)}
      </section>
    </header>

    {
      cover && (
        <Image
          src={cover}
          quality={100}
          loading="eager"
          class="rounded-xl w-full my-8 object-cover"
          alt={`img of ${title}`}
        />
      )
    }

    <hr />

    <section>
      <slot />
    </section>
  </article>
</BaseLayout>

<script>
  const fnObserver = () => {
    const handleIntersection = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        const index = document.querySelector(
          `aside a[href="#${entry.target.id}"]`,
        )

        if (entry.isIntersecting) {
          index?.classList.remove('bg-slate-200', 'dark:bg-slate-800') // remove bg
          index?.classList.add(
            'bg-indigo-600',
            'dark:bg-indigo-700',
            'text-white',
            'font-bold',
            'transition-colors',
            'duration-200',
          )
        } else {
          index?.classList.add('bg-slate-200', 'dark:bg-slate-800') // add bg
          index?.classList.remove(
            'bg-indigo-600',
            'dark:bg-indigo-700',
            'text-white',
            'font-bold',
            'transition-colors',
            'duration-200',
          )
        }
      })
    }

    const headings = document.querySelectorAll(
      'section.prose h1, section.prose h2, section.prose h3, section.prose h4, section.prose h5, section.prose h6',
    )

    const options = {
      root: null,
      rootMargin: ' 15% 0px 0% 0px ',
      threshold: 1,
    }

    const observer = new IntersectionObserver(handleIntersection, options)

    headings.forEach((heading) => {
      observer.observe(heading)
    })
  }
  fnObserver()
  document.addEventListener('astro:after-swap', fnObserver)
</script>
