---
import { cn } from '@/utils'
import CloseIcon from '@/components/icons/Close'

type Contents = {
  label: string
  link: string
}

interface Props {
  title: string
  contents: Contents[]
  type: 'solid' | 'outline' // change the type of modal button
  color?: string // change the color of modal button
}
const { title, contents, type, color }: Props = Astro.props
---

<button
  id="openModalButton"
  class-={cn(type === 'solid' && color ? `bg-${color}-500  rounded-md` : ``)}
>
  <!-- the text of the button that to open modal -->
  <slot />
</button>

<dialog
  id="modal"
  class="hidden fixed inset-0 justify-center items-center transition-opacity opacity-0"
>
  <div
    id="modalContent"
    class="w-screen h-screen bg-white dark:bg-black dark:text-white p-10 transform transition-transform"
  >
    <section class="flex justify-between items-center mb-20">
      <h1 class="text-3xl">{title}</h1>
      <button id="closeModalButton" aria-label="Close Modal">
        <CloseIcon />
      </button>
    </section>

    <section class="text-center">
      {
        contents.map((content) => (
          <a href={content.link}>
            <h1 class="mb-10 text-xl">{content.label}</h1>
          </a>
        ))
      }
    </section>
  </div>
</dialog>

<script>
  const modal: HTMLElement | null = document.getElementById('modal')
  const modalContent: HTMLElement | null =
    document.getElementById('modalContent')
  const openModalButton: HTMLElement | null =
    document.getElementById('openModalButton')
  const closeModalButton: HTMLElement | null =
    document.getElementById('closeModalButton')

  const openModal = () => {
    if (modal && modalContent) {
      modal.style.display = 'flex'

      requestAnimationFrame(() => {
        modal.style.opacity = '1'
        modalContent.classList.add('transition-transform', 'show') // Trigger scale animation
      })
    }
  }

  const closeModal = () => {
    if (modal && modalContent) {
      modal.style.opacity = '0'

      setTimeout(() => {
        modal.style.display = 'none'
        modalContent.classList.remove('transition-transform', 'show') // Reset show class
      }, 300)
    }
  }

  // click outside of modal content to close modal
  // if (modal)
  //   modal.addEventListener('click', (e) => {
  //     if (e.target === modal) {
  //       closeModal()
  //     }
  //   })

  if (closeModalButton) closeModalButton.addEventListener('click', closeModal)
  if (openModalButton) openModalButton.addEventListener('click', openModal)
</script>
